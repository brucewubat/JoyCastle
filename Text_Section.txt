1. 常用的网络层框架方案分析
针对休闲游戏（如 Homescape、Bingo Blitz、Monopoly Go、开心消消乐等），常用的网络层框架方案主要有以下几种：
1.1 HTTP/HTTPS 短连接方案
特点：基于请求 - 响应模式，适合数据量小、交互频率低的场景
优势：实现简单，兼容性好，易于部署和维护
适用场景：游戏配置更新、排行榜数据同步、玩家信息上传等
1.2 WebSocket 长连接方案
特点：全双工通信，服务器可主动推送消息
优势：实时性好，减少连接开销，适合高频交互
适用场景：实时对战、多人协作、即时通知等
我之前的休闲游戏项目中使用的就是短连接方案，因为与服务器的交互频率较低。

2. 网络层框架应实现的功能
2.1 基础通信能力
封装 HTTP/HTTPS 请求（GET/POST/PUT 等）
支持表单、JSON 等多种数据格式
统一的请求 URL 管理（避免硬编码）
2.2 可靠性保障
分级超时策略（普通请求 5 秒，大数据请求 15 秒）
失败重试机制（区分可重试错误，如网络波动）
断网缓存队列（网络恢复后自动提交队列中的请求）
2.3 性能优化
请求合并（将多个小请求合并为一个批量请求）
数据压缩（请求 / 响应数据 gzip 压缩）
多级缓存（内存缓存、持久化缓存）
请求优先级（配置加载 > 玩家数据 > 日志上报）
2.4 安全机制
请求签名（时间戳 + nonce + 密钥签名，防篡改）
敏感数据加密（如支付信息单独加密）
证书校验（防止中间人攻击）
2.5 监控与调试
详细的请求日志（成功 / 失败状态、耗时、数据量）
异常上报（失败率、超时率统计）
网络状态监听（弱网 / 断网提示）

3. 框架痛点
（1）实时性不足 （2）弱网情况存在适配问题 （3）并发请求处理可能存在冲突，如道具数量的变化

 